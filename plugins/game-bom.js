// game-bom.js (Archivo principal)
let handler = async (m, {
    conn
}) => {
    conn.bomb = conn.bomb || {};
    let id = m.chat,
        timeout = 180000;
    if (id in conn.bomb) return conn.reply(m.chat, '*^ ¬°Esta sesi√≥n a√∫n no ha terminado!*', conn.bomb[id][0]);
    
    // Recompensas base
    let rewardCoin = randomInt(600, 3000);
    let rewardExp = randomInt(100, 800);
    
    const bom = ['üí•', '‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ'].sort(() => Math.random() - 0.5);
    const number = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£'];
    const array = bom.map((v, i) => ({
        emot: v,
        number: number[i],
        position: i + 1,
        state: false
    }));
    
    let teks = `‰πÇ  *B O M B A*\n\nEnv√≠a un n√∫mero del *1* al *9* para abrir una de las *9* casillas numeradas a continuaci√≥n:\n\n`;
    for (let i = 0; i < array.length; i += 3) teks += array.slice(i, i + 3).map(v => v.state ? v.emot : v.number).join('') + '\n';
    teks += `\nTiempo l√≠mite: [ *${((timeout / 1000) / 60)} minutos* ]\n`;
    teks += `Recompensa actual: üí∏ *${moneda}*: ${formatNumber(rewardCoin)} | ‚ú® *EXP*: ${formatNumber(rewardExp)}\n`;
    teks += `¬°Si encuentras la casilla que contiene la bomba, perder√°s la recompensa!`;
    
    let msg = await conn.reply(m.chat, teks, m);
    let { key } = msg;

    // Actualizar usuario en la base de datos
    let users = global.db.data.users[m.sender];
    if (!users) users = global.db.data.users[m.sender] = {};
    users.lastBomb = new Date * 1;

    conn.bomb[id] = [
        msg,
        array,
        setTimeout(() => {
            let v = array.find(v => v.emot == 'üí•');
            if (conn.bomb[id]) conn.reply(m.chat, `*¬°Se acab√≥ el tiempo!* La bomba estaba en la casilla n√∫mero ${v.number}.`, conn.bomb[id][0].key);
            delete conn.bomb[id];
        }, timeout),
        key,
        m.sender,
        rewardCoin,
        rewardExp,
        0, // contador de casillas abiertas
        false // flag para saber si ya se gan√≥
    ];
};

handler.help = ["bomba"];
handler.tags = ["juego"];
handler.command = /^(bomba|cerrarbomba)$/i;

export default handler;

function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function formatNumber(number) {
    return number.toLocaleString();
}

// Constante para la moneda
const moneda = "COINS";